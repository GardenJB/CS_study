#Spring Cloud 마이크로서비스 애플리케이션(MSA)

##Microservice

###IT System
Mainframe, Hardware > Distributed > Anti-Fragile, Cloud Native

* Anti-Fragile : 
Auto scaling, Microservices, Chaos engineering,Continuous deployments
서버가 유동적으로 자동 조절 가능, 기능 독립적 개발 및 배포, 불확실성에도 안정적 구축, CI/CD(pipeline)

###Cloud Native Architecture
* 확장 가능
 - 시스템의 수평적 확장에 유연
 - 확장 ㅅ서버로 시스템 분산, 가용성 보장
 - 시스템, 서비스 애플리케이션 단위으 패키지(컨테이너)
 - 모니터링

* 탄력적
 - 서비스 생성 - 통합-배포, 비즈니스 환경 변화 대응 시간 단축
 - 분할 서비스 구조
 - 무상태 통신 프로토콜
 - 서비스 추가 삭제 자동 감지
 - 사용자 요청 동적 처리

* 장애 격리
 - 오류가 다른 서비스에 영향 주지 않음

 ###Cloud Native Application
 - Micoservices
 - CI/CK
 - DevOps
 - Containers

###12 Factors
- code base 버전 제어, 코드 통일
 : 자체 레퍼지토리에 저장된 각 마이크로 서비스에 대한 단일 코드베이스
- 종속성
: 각 마이크로 서비스 자체 종속성 패키징, 전체 시스템에 영향 없이 변경 가능
- 구성 정보 (외부 제어)
: 시스템 코드 외부에서 구성 관리 도구 사용 서비스 작업 제어
- 서비스 지원
: 보조 서비스 추가 지원 가능, 응용 프로그램 자체에서 필요한 백킹 시스템 리소스 분리 서로 상호 가능한 서비스 자체를 코드 종속성 없이 작업 가능
- 빌드, 실행 환경 분리
: 개발과 릴리즈 실행 환경 분리, 고유 아이디 태그와 롤백 가능, CI/CD 자동 구축 
- 독립적 프로세스
: 실행 중인 다른 서비스와 분리되어 자체 프로세스 운영 가능
- 포트 바인딩
인터페이스 기능 등 자체 기능이 포트에 포함, 다른 마이크로 서비스와 격리 가능
- 동시성
: 동일 서비스 여러 인스턴스에서 서비스 가능
- 인스턴스 삭제 가능, 확장성, 정상 종료 가능

- 서비스 구분
: 개발 단계와 프로덕션 단계 구분, 작업이 종속적이지 않은 상태로 서비스 유지
- 로그 관리, 모니터링
: 생성 로그 이벤트 스트림 처리, 어플리케이션 실행과 분리되어 작동되는 상태 유지
- 프로세스 관리, 리포팅, 데이터 분석
: 상태, 리소스 사용 파악 가능

* +3
- API first
: API 개발, 사용자 측면 개발 고민
- Telemetry
: 항목 지표 수치화, 시각화 관리
- Authenitication and authorization
: 인증 관리
